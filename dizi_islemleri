//kullanıcıdan alınan sayıya göre yer açıp tek boyutlu dizi yazdıran program
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main()
{
	int* ptr;
	int sutun_sayisi,deger,i,j;
	printf("sutun sayisini giriniz :");
	scanf("%d", &sutun_sayisi);
	ptr = (int*)malloc(sizeof(int) * sutun_sayisi);

		for (i = 0; i < sutun_sayisi; i++) {
			printf("%d .indisteki degeri giriniz :", i);
			scanf("%d", &deger);
			*(ptr + i) = deger;	
	    }
		for (i = 0; i < sutun_sayisi; i++) {
			printf("%d,", *(ptr + i));
		}
		free(ptr); //belleği serbest bırakıyor
	return 0;
}
//random sayı atayarak iki boyutlu matris yazan program
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void iki_boyutlu_matris_olustur(int*** matris, int satir_sayisi, int sutun_sayisi) { /*int*** çünkü int** olan iki boyutlu matrisin adresini göndermiş oluyorum ve
	                                                                                   böylece bellekte direkt main fonk. int** matrisi için yer açılıyor*/
	int i, j;
	*matris = (int**)malloc(sizeof(int*) * satir_sayisi);                  //matris* direkt intt matrisi oluyor
	for (i = 0; i < satir_sayisi; i++) {
		*(*matris + i) = (int*)malloc(sizeof(int) * sutun_sayisi);
		for (j = 0; j < sutun_sayisi; j++) {
			*(*(*matris + i) + j) = rand() % 9;
		}
	}
}
void matris_yaz(int** matris, int satir_sayisi, int sutun_sayisi) { //int ** kullanıp direkt matrisin kopyasını yazdırdım çünkü matriste değişiklik yapmıyorum
	int i, j;
	for (i = 0; i < satir_sayisi; i++) {
		for (j = 0; j < sutun_sayisi; j++) {
			printf("%d ", *(*matris + i) + j);
			if (j == sutun_sayisi - 1) {
				printf("\n");
			}
		}
	}
}
int main()
{
	int** matris;
	int sutun_sayisi=0,satir_sayisi=0;

	printf("satir sayisini giriniz :");
	scanf("%d", &satir_sayisi);
	printf("sutun sayisini giriniz :");
	scanf("%d", &sutun_sayisi);
	iki_boyutlu_matris_olustur(&matris, satir_sayisi, sutun_sayisi);      //matrisin adresini gönderiyoru margüman olarak çünkü değişiklikler kalıcı olmalı
	matris_yaz(matris, satir_sayisi, sutun_sayisi);
	return 0;
}
//iki boyutlu matriste toplama islemi
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void iki_boyutlu_matris_olustur(int*** matris, int satir_sayisi, int sutun_sayisi) { /*int*** çünkü int** olan iki boyutlu matrisin adresini göndermiş oluyorum ve
	                                                                                   böylece bellekte direkt main fonk. int** matrisi için yer açılıyor*/
	int i, j;
	*matris = (int**)malloc(sizeof(int*) * satir_sayisi);                  //matris* direkt maindeki matrisi oluyor
	for (i = 0; i < satir_sayisi; i++) {
		*(*matris + i) = (int*)malloc(sizeof(int) * sutun_sayisi);
		for (j = 0; j < sutun_sayisi; j++) {
			*(*(*matris + i) + j) = rand() % 9;
		}
	}
}
void matris_yaz(int** matris, int satir_sayisi, int sutun_sayisi) { //int ** kullanıp direkt matrisin kopyasını yazdırdım çünkü matriste değişiklik yapmıyorum
	int i, j;
	for (i = 0; i < satir_sayisi; i++) {
		for (j = 0; j < sutun_sayisi; j++) {
			printf("%d ", *(*(matris + i) + j));
			if (j == sutun_sayisi - 1) {
				printf("\n");
			}
		}
	}
}
int** matris_topla(int** m1,int** m2,int satir_sayisi1, int sutun_sayisi1, int satir_sayisi2, int sutun_sayisi2) {
	int i, j;
	int** m3;
	
	iki_boyutlu_matris_olustur(&m3, satir_sayisi1, sutun_sayisi2);
	if (satir_sayisi1 == satir_sayisi2 && sutun_sayisi1 == sutun_sayisi2) {
		for (i = 0; i < satir_sayisi1; i++) {
			for (j = 0; j < sutun_sayisi1; j++) {
				(*(*(m3 + i) + j)) = (*(*(m1 + i) + j)) + (*(*(m2 + i) + j));
			}
		}
		return m3;
	}
	else {
		return	NULL;
	}

}
int main()
{
	int** m1;
	int** m2;
	int** m3;
	int sutun_sayisi1=0,satir_sayisi1=0,sutun_sayisi2 = 0,satir_sayisi2 = 0;

	printf("satir1 sayisini giriniz :");
	scanf("%d", &satir_sayisi1);
	printf("sutun1 sayisini giriniz :");
	scanf("%d", &sutun_sayisi1);
	printf("satir2 sayisini giriniz :");
	scanf("%d", &satir_sayisi2);
	printf("sutun2 sayisini giriniz :");
	scanf("%d", &sutun_sayisi2);
	iki_boyutlu_matris_olustur(&m1, satir_sayisi1, sutun_sayisi1);
	iki_boyutlu_matris_olustur(&m2, satir_sayisi2, sutun_sayisi2); //matrisin adresini gönderiyorum argüman olarak çünkü değişiklikler kalıcı olmalı
	matris_yaz(m1, satir_sayisi1, sutun_sayisi1);
	printf("\n");
	matris_yaz(m2, satir_sayisi2, sutun_sayisi2);
	printf("\n");
	m3 = matris_topla(m1,m2,satir_sayisi1,sutun_sayisi1, satir_sayisi2,sutun_sayisi2);
	if (m3 == NULL) {
		printf("boyutlar eslesmedigi icin islem yapılamadı!");
	}
	matris_yaz(m3, satir_sayisi2, sutun_sayisi2);
	return 0;
}
//matrislerle çarpma yapan program
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void iki_boyutlu_matris_olustur(int*** matris, int satir_sayisi, int sutun_sayisi) { /*int*** çünkü int** olan iki boyutlu matrisin adresini göndermiş oluyorum ve
	                                                                                   böylece bellekte direkt main fonk. int** matrisi için yer açılıyor*/
	int i, j;
	*matris = (int**)malloc(sizeof(int*) * satir_sayisi);                  //matris* direkt maindeki matrisi oluyor
	for (i = 0; i < satir_sayisi; i++) {
		*(*matris + i) = (int*)malloc(sizeof(int) * sutun_sayisi);
		for (j = 0; j < sutun_sayisi; j++) {
			*(*(*matris + i) + j) = rand() % 3;
		}
	}
}
void matris_yaz(int** matris, int satir_sayisi, int sutun_sayisi) { //int ** kullanıp direkt matrisin kopyasını yazdırdım çünkü matriste değişiklik yapmıyorum
	int i, j;
	for (i = 0; i < satir_sayisi; i++) {
		for (j = 0; j < sutun_sayisi; j++) {
			printf("%d ", *(*(matris + i) + j));
			if (j == sutun_sayisi - 1) {
				printf("\n");
			}
		}
	}
}
int** matris_carp(int** m1, int** m2, int satir_sayisi1, int sutun_sayisi1, int satir_sayisi2, int sutun_sayisi2) {
	int i, j, k;
	int** m3;
	iki_boyutlu_matris_olustur(&m3, satir_sayisi1, sutun_sayisi2);
	if (sutun_sayisi1 == satir_sayisi2) {
		for (i = 0; i < satir_sayisi1; i++) {
			for (j = 0; j < sutun_sayisi2; j++) {
				m3[i][j] = 0;
				for (k = 0; k < satir_sayisi2; k++) {
					m3[i][j] = m3[i][j]+ m1[i][k] * m2[k][j]; //burada toplam yapıyoruz çünkü matrislerde çarpıp toplayıp o indisteli elemanı buluyoruz
				}                                               // 1 0 2   0 1 
			}                                                          2 1 3   1 2  =1*0+0*1+2*0=0     0 7     
		}                                                                          0 3   1*1+0*2+2*3=7     1 13    
	}                                                                                        2*0+1*1+3*0=1
	else {                                                                                   2*1+1*2+3*3=13
		return NULL;
	}
	return m3;
}
int main()
{
	int** m1;
	int** m2;
	int** m3;
	int sutun_sayisi1=0,satir_sayisi1=0,sutun_sayisi2 = 0,satir_sayisi2 = 0;

	printf("satir1 sayisini giriniz :");
	scanf("%d", &satir_sayisi1);
	printf("sutun1 sayisini giriniz :");
	scanf("%d", &sutun_sayisi1);
	printf("satir2 sayisini giriniz :");
	scanf("%d", &satir_sayisi2);
	printf("sutun2 sayisini giriniz :");
	scanf("%d", &sutun_sayisi2);
	iki_boyutlu_matris_olustur(&m1, satir_sayisi1, sutun_sayisi1);
	iki_boyutlu_matris_olustur(&m2, satir_sayisi2, sutun_sayisi2); //matrisin adresini gönderiyorum argüman olarak çünkü değişiklikler kalıcı olmalı
	matris_yaz(m1, satir_sayisi1, sutun_sayisi1);
	printf("\n");
	matris_yaz(m2, satir_sayisi2, sutun_sayisi2);
	printf("\n");
	m3 = matris_carp(m1, m2, satir_sayisi1, sutun_sayisi1, satir_sayisi2, sutun_sayisi2);
	if (m3 == NULL) {
		printf("boyut uyusmazligi!");
	}
	matris_yaz(m3, satir_sayisi1, sutun_sayisi2);
	return 0;
